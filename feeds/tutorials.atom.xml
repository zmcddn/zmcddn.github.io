<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Carson's Tech Hut - tutorials</title><link href="/" rel="alternate"></link><link href="/feeds/tutorials.atom.xml" rel="self"></link><id>/</id><updated>2018-07-04T00:00:00-06:00</updated><entry><title>Setup Virtualenv for Any Project</title><link href="/setup-virtualenv-for-any-project.html" rel="alternate"></link><published>2018-07-04T00:00:00-06:00</published><updated>2018-07-04T00:00:00-06:00</updated><author><name>Carson Zhang</name></author><id>tag:None,2018-07-04:/setup-virtualenv-for-any-project.html</id><summary type="html">&lt;ul&gt;
&lt;li&gt;Virtualenv is a very handy tool for creating seperate virtual environments for python projects.&lt;/li&gt;
&lt;li&gt;It is essential and probably mandatory in many cases to use Virtualenv or Virtualenv-like tools (i.e. Anaconda, Pipenv) to run a python project.&lt;/li&gt;
&lt;li&gt;In this tutorial, I'll show you how to create a virtualenv for â€¦&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;ul&gt;
&lt;li&gt;Virtualenv is a very handy tool for creating seperate virtual environments for python projects.&lt;/li&gt;
&lt;li&gt;It is essential and probably mandatory in many cases to use Virtualenv or Virtualenv-like tools (i.e. Anaconda, Pipenv) to run a python project.&lt;/li&gt;
&lt;li&gt;In this tutorial, I'll show you how to create a virtualenv for a python project step-by-step. &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; the commends in this tutorial is for Linux/Mac OS, Windows will be slightly differnet when setting up environment variables and system path&lt;/p&gt;
&lt;h2&gt;Setup virtualenv&lt;/h2&gt;
&lt;h4&gt;1. Install pip&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;sudo apt-get install python-pip&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;2. Install virtualenv&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;sudo pip install virtualenv&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;3. Create a folder to install virtualenv&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Normally this folder would be created inside the project folder&lt;ul&gt;
&lt;li&gt;For example, inside the &lt;strong&gt;Projects&lt;/strong&gt; folder&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;It should be named as &lt;strong&gt;Envs&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;4. Install virtualenvwrapper&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;sudo pip install virtualenvwrapper&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;This is a very useful tool/package to save you from the hassles of virtualenv&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;5. Set WORKON_HOME to your virtualenv&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;export WORKON_HOME=~/Desktop/Projects/Env&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;If the virtualenv folder is located at the root directary, use:&lt;ul&gt;
&lt;li&gt;&lt;code&gt;export WORKON_HOME=~/.Env&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;6. Add &lt;code&gt;virtualenvwrapper.sh&lt;/code&gt; to &lt;code&gt;.bashrc&lt;/code&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Nevigate to the folder where the virtualenv is installed (normally under /usr/local/bin)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;nano ~/.bashrc&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Add the following line to the folder:&lt;ul&gt;
&lt;li&gt;&lt;code&gt;. /usr/local/bin/virtualenvwrapper.sh&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;If the virtualenvwrapper is installed in another directory, add the path of the directory instead of the &lt;code&gt;/usr/local/bin/&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;For example, &lt;code&gt;. /Users/Carson/anaconda3/bin/virtualenvwrapper.sh&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;CTRL + X&lt;/code&gt; to exit, and &lt;code&gt;Y&lt;/code&gt; to save, and hit &lt;code&gt;Enter&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;After its being added, use &lt;code&gt;source ~/.bashrc&lt;/code&gt; to check if it is working. It should print some files on the screen with no errors&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2&gt;Setup virtual environment&lt;/h2&gt;
&lt;h4&gt;1. make virtual environment&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;mkvirtualenv env_name --python=python3&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;check python version: &lt;code&gt;python -V&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;2. activate environment&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;the environment is activated by default when created&lt;/li&gt;
&lt;li&gt;to activate an environment: &lt;code&gt;workon env_name&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;3. get the project&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;nevigate to the directory that you would like to download the project&lt;/li&gt;
&lt;li&gt;get the project: &lt;code&gt;git clone&lt;/code&gt; &lt;/li&gt;
&lt;li&gt;From the directory you could tell which python version the project is under&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;4. get all the nesscary packages&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;enter the project directory and nevigate to where the requirement file is located&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pip install -r requirements.txt&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;5. adding apps for the defaul path in virtualenv&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;sometimes when installing the packages errors may occor, since the apps are put inside the &lt;strong&gt;apps folder&lt;/strong&gt; which is not recognized by virtualenv&lt;/li&gt;
&lt;li&gt;add the &lt;strong&gt;apps folder&lt;/strong&gt;: &lt;code&gt;add2virtualenv apps&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;6. setup default startup folder for the environment&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;nevigate to the folder where you work all the time&lt;/li&gt;
&lt;li&gt;setup the folder as default: &lt;code&gt;setvirtualenvproject&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;once the defaul folder is setup, use &lt;code&gt;cdproject&lt;/code&gt; to go back from anywhere&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;7. install dev tools:&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;If the project has a different requirements file for the devs, nevigate tothat folder&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pip install -r /requirements/dev.txt&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;8. remove environment&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;rmvirtualenv env_name&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;9. tell django which setting files to run in environment:&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;the goal of this step is for the django to use the customized settings in the &lt;code&gt;/project_name/settings/dev.py&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;go to the folder where the &lt;code&gt;manage.py&lt;/code&gt; locates&lt;/li&gt;
&lt;li&gt;copy the path generated: &lt;code&gt;pwd&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;go to the virtual environment: &lt;code&gt;cdvirtualenv&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cd bin&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;to enter and edit the file: &lt;code&gt;nano postactivate&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;put the following lines below the comments:&lt;ul&gt;
&lt;li&gt;&lt;code&gt;export DJANGO_SETTINGS_MODULE='project_name.settings.dev'&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;export PYTHONPATH=$PYTHONPATH:'path_generated_by_pwd'&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;The first line allows you to use customized settings&lt;/li&gt;
&lt;li&gt;The second line allows you to &lt;code&gt;django-admin&lt;/code&gt; commands&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;close and save the file: &lt;code&gt;ctrl + x&lt;/code&gt;, type &lt;code&gt;y&lt;/code&gt; and press &lt;code&gt;enter&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;to enter and edit the file: &lt;code&gt;nano postdeactivate&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;put the following lines below the comments:&lt;ul&gt;
&lt;li&gt;&lt;code&gt;unset DJANGO_SETTINGS_MODULE&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;deactivate and activate&lt;/strong&gt; the environment for the settings to work&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;10. start django project&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;if you have done step 9: &lt;code&gt;django-admin runserver&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;if you haven't done step 9: &lt;code&gt;python manage.py runserver&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;11. check the website in browser&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;localhost:8000&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;12. Force refresh the browser&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Sometimes when working with multiple projects and switching back and forth, the page display in browser can be scattered since there is cache built-in the browser&lt;/li&gt;
&lt;li&gt;to force refresh the browser: &lt;code&gt;ctrl + shift + r&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;13. Some useful virtualenv commands&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;lsvirtualenv&lt;/code&gt;&lt;/strong&gt;: List all of the environments.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;cdsitepackages&lt;/code&gt;&lt;/strong&gt;: Navigate into the &lt;code&gt;site-package&lt;/code&gt; directory of the currently activated virtual environment&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;lssitepackages&lt;/code&gt;&lt;/strong&gt;: Shows contents of &lt;code&gt;site-package&lt;/code&gt; directory.&lt;/li&gt;
&lt;/ul&gt;</content><category term="Python"></category><category term="Ubuntu"></category><category term="Linux"></category><category term="Virtualenv"></category><category term="setup"></category></entry><entry><title>How to create Sublime Text Project</title><link href="/how-to-create-sublime-text-project.html" rel="alternate"></link><published>2018-07-03T00:00:00-06:00</published><updated>2018-07-03T00:00:00-06:00</updated><author><name>Carson Zhang</name></author><id>tag:None,2018-07-03:/how-to-create-sublime-text-project.html</id><summary type="html">&lt;ol&gt;
&lt;li&gt;Create a project folder to store all the sublime text project file &lt;ul&gt;
&lt;li&gt;Sublime Text Project file is a build file that must be saved somewhere on the disk. So a good way of doing this is to save the file into a folder something similar to &lt;strong&gt;Sublimetext Project&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Open up â€¦&lt;/li&gt;&lt;/ol&gt;</summary><content type="html">&lt;ol&gt;
&lt;li&gt;Create a project folder to store all the sublime text project file &lt;ul&gt;
&lt;li&gt;Sublime Text Project file is a build file that must be saved somewhere on the disk. So a good way of doing this is to save the file into a folder something similar to &lt;strong&gt;Sublimetext Project&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Open up a new sublime text window with no other tabs opened.&lt;/li&gt;
&lt;li&gt;Drag the whole project folder into the folder panel&lt;/li&gt;
&lt;li&gt;Nevigate to the site package folder:&lt;ul&gt;
&lt;li&gt;This folder is noramlly located at the &lt;code&gt;Envs\project_name\lib\python_version\site-packages&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Drag the entire &lt;strong&gt;site-packages&lt;/strong&gt; folder into the folder panel&lt;/li&gt;
&lt;li&gt;Now the folder panel should have two folders: the project folder and the corresponding &lt;strong&gt;site-packages&lt;/strong&gt; folder. Then you can save this as a project and save it to the &lt;strong&gt;Sublimetext Project&lt;/strong&gt; you just created&lt;/li&gt;
&lt;li&gt;After the sublimetext project is created, you can quickly switch among projects using shortcut &lt;code&gt;CTRL + ALT + P&lt;/code&gt;. If the shortcut doesn't work, check &lt;a href="https://forum.sublimetext.com/t/quick-switch-project-shortcut-doesnt-work-anymore/17261/2"&gt;&lt;strong&gt;HERE&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</content><category term="Sublime Text"></category><category term="Environment Setup"></category></entry><entry><title>Install pdftk on unbuntu 18.04</title><link href="/install-pdftk-on-unbuntu-1804.html" rel="alternate"></link><published>2018-06-27T00:00:00-06:00</published><updated>2018-06-27T00:00:00-06:00</updated><author><name>Carson Zhang</name></author><id>tag:None,2018-06-27:/install-pdftk-on-unbuntu-1804.html</id><summary type="html">&lt;p&gt;PDFTK is a very handy package that handles pdfs. It could open and wrtie to existing pdfs, and a lot of other great things. However, it is missing from the Ubuntu 18 and is very tricky to install on Ubuntu 18 (but works nice and smoothly on Ubuntu 16). This â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;PDFTK is a very handy package that handles pdfs. It could open and wrtie to existing pdfs, and a lot of other great things. However, it is missing from the Ubuntu 18 and is very tricky to install on Ubuntu 18 (but works nice and smoothly on Ubuntu 16). This tutorial is intended to save you some time/hair when you have to install PDFTK on ubuntu 18.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;RUN &lt;code&gt;sudo apt-get update&lt;/code&gt; to update the current libs&lt;/li&gt;
&lt;li&gt;RUN &lt;code&gt;sudo apt-get install libcairo2 libpango-1.0-0 libpangocairo-1.0.0 libgdk-pixbuf2.0-0 libffi-dev libmagickwand-dev&lt;/code&gt; to install all the necessary packages&lt;/li&gt;
&lt;li&gt;RUN &lt;code&gt;locate sources.list&lt;/code&gt; to find the path for the &lt;em&gt;sources.list&lt;/em&gt; file&lt;ul&gt;
&lt;li&gt;It is &lt;em&gt;/etc/apt/sources.list&lt;/em&gt; on my machine&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;RUN &lt;code&gt;sudo nano /etc/apt/sources.list&lt;/code&gt; to go into the file and edit it&lt;/li&gt;
&lt;li&gt;Add the following lines to the bottom of the file:&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;deb&lt;/span&gt; &lt;span class="s"&gt;http://no.archive.ubuntu.com/ubuntu/&lt;/span&gt; &lt;span class="kp"&gt;artful&lt;/span&gt; &lt;span class="kp"&gt;main&lt;/span&gt; &lt;span class="kp"&gt;restricted&lt;/span&gt;
&lt;span class="k"&gt;deb&lt;/span&gt; &lt;span class="s"&gt;http://no.archive.ubuntu.com/ubuntu/&lt;/span&gt; &lt;span class="kp"&gt;artful-updates&lt;/span&gt; &lt;span class="kp"&gt;main&lt;/span&gt; &lt;span class="kp"&gt;restricted&lt;/span&gt;
&lt;span class="k"&gt;deb&lt;/span&gt; &lt;span class="s"&gt;http://no.archive.ubuntu.com/ubuntu/&lt;/span&gt; &lt;span class="kp"&gt;artful&lt;/span&gt; &lt;span class="kp"&gt;universe&lt;/span&gt;
&lt;span class="k"&gt;deb&lt;/span&gt; &lt;span class="s"&gt;http://no.archive.ubuntu.com/ubuntu/&lt;/span&gt; &lt;span class="kp"&gt;artful-updates&lt;/span&gt; &lt;span class="kp"&gt;universe&lt;/span&gt;
&lt;span class="k"&gt;deb&lt;/span&gt; &lt;span class="s"&gt;http://no.archive.ubuntu.com/ubuntu/&lt;/span&gt; &lt;span class="kp"&gt;artful&lt;/span&gt; &lt;span class="kp"&gt;multiverse&lt;/span&gt;
&lt;span class="k"&gt;deb&lt;/span&gt; &lt;span class="s"&gt;http://no.archive.ubuntu.com/ubuntu/&lt;/span&gt; &lt;span class="kp"&gt;artful-updates&lt;/span&gt; &lt;span class="kp"&gt;multiverse&lt;/span&gt;
&lt;span class="k"&gt;deb&lt;/span&gt; &lt;span class="s"&gt;http://no.archive.ubuntu.com/ubuntu/&lt;/span&gt; &lt;span class="kp"&gt;artful-backports&lt;/span&gt; &lt;span class="kp"&gt;main&lt;/span&gt; &lt;span class="kp"&gt;restricted&lt;/span&gt; &lt;span class="kp"&gt;universe&lt;/span&gt; &lt;span class="kp"&gt;multiverse&lt;/span&gt;
&lt;span class="k"&gt;deb&lt;/span&gt; &lt;span class="s"&gt;http://security.ubuntu.com/ubuntu&lt;/span&gt; &lt;span class="kp"&gt;artful-security&lt;/span&gt; &lt;span class="kp"&gt;main&lt;/span&gt; &lt;span class="kp"&gt;restricted&lt;/span&gt;
&lt;span class="k"&gt;deb&lt;/span&gt; &lt;span class="s"&gt;http://security.ubuntu.com/ubuntu&lt;/span&gt; &lt;span class="kp"&gt;artful-security&lt;/span&gt; &lt;span class="kp"&gt;universe&lt;/span&gt;
&lt;span class="k"&gt;deb&lt;/span&gt; &lt;span class="s"&gt;http://security.ubuntu.com/ubuntu&lt;/span&gt; &lt;span class="kp"&gt;artful-security&lt;/span&gt; &lt;span class="kp"&gt;multiverse&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ol&gt;
&lt;li&gt;Use &lt;code&gt;CTRL + x&lt;/code&gt; (and hit enter) to save and quit&lt;/li&gt;
&lt;li&gt;Update the system: &lt;code&gt;sudo apt update&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Install related system packages in the folowing order:&lt;ul&gt;
&lt;li&gt;&lt;code&gt;sudo apt-get install libgcj-common&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sudo apt-get install libgcj17&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Insatll the pdftk package: &lt;code&gt;sudo apt-get install pdftk&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;After the pdftk package is installed, go back to the sources.list file (i.e step 4) and delete the lines we added in step 5&lt;/li&gt;
&lt;li&gt;Update system again (i.e. step 7)&lt;/li&gt;
&lt;/ol&gt;
&lt;h4&gt;Notes:&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;PDFTK package is not supported in ubuntu 18 since it depends on a previous system package, and last version that supports this package was ubuntu 17.&lt;/li&gt;
&lt;li&gt;The above way of installation was to add some ubuntu 17 reference pacakge information on the system source file on ubuntu 18, and then install the pdftk package. &lt;/li&gt;
&lt;li&gt;After the pdftk is intalled, get rid of the information that was added to the system file so that the system update won't install oldder version of packages&lt;/li&gt;
&lt;li&gt;This instruction was based on the post &lt;a href="https://askubuntu.com/questions/1028522/how-can-i-install-pdftk-in-ubuntu-18-04-bionic"&gt;&lt;strong&gt;HERE&lt;/strong&gt;&lt;/a&gt;, and it is a combination of the answers from &lt;em&gt;Wikrle&lt;/em&gt; and &lt;em&gt;amha&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="Python"></category><category term="PDF"></category><category term="pdftk"></category><category term="Ubuntu"></category></entry><entry><title>The ultimate guide to setup multiple Python environment with Anaconda and Sublime Text</title><link href="/the-ultimate-guide-to-setup-multiple-python-environment-with-anaconda-and-sublime-text.html" rel="alternate"></link><published>2018-02-11T00:00:00-07:00</published><updated>2018-02-11T00:00:00-07:00</updated><author><name>Carson Zhang</name></author><id>tag:None,2018-02-11:/the-ultimate-guide-to-setup-multiple-python-environment-with-anaconda-and-sublime-text.html</id><summary type="html">&lt;p&gt;The need for setting up a virtual executing environment of Python has a lot of advantages and has been widely discussed over internet. Here I have a tutorial for setting up multiple environment with Anaconda and Sublime Text.  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The reason I choose Anaconda over Virtualenv is because Anaconda is widely â€¦&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt;The need for setting up a virtual executing environment of Python has a lot of advantages and has been widely discussed over internet. Here I have a tutorial for setting up multiple environment with Anaconda and Sublime Text.  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The reason I choose Anaconda over Virtualenv is because Anaconda is widely used in the industry, especially in the big data and machine learning field, and it covers most functions of Virtualenv.   &lt;/li&gt;
&lt;li&gt;I choose Sublime Text as my IDE because it is very simple yet powful with many plugins. It is way faster and more efficient than many other IDES.  &lt;/li&gt;
&lt;li&gt;The installation of Anaconda will not be covered here as there are many tutorials online already.  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The tutorial has the following steps:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#step1"&gt;Step 1: install Anaconda 2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#step2"&gt;Step 2: setup python environment with Anaconda on Win 10&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#step3"&gt;Step 3: setup Sublime Text build file on Win 10&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#step4"&gt;Step 4: setup python environment with Anaconda on Mac&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#step5"&gt;Step 5: setup Sublime Text build file on Mac&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#summary"&gt;Summary of useful conda commands&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a name="step1"&gt;&lt;/a&gt;Step 1: install Anaconda 3&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Install &lt;a href="https://www.anaconda.com/download/"&gt;&lt;strong&gt;Anaconda 3&lt;/strong&gt;&lt;/a&gt;. Choose the version that you use most frequently. &lt;ul&gt;
&lt;li&gt;For example, if you are working with python 3.6 most of the time, you should download the 3.6 version; otherwise, you can download the 2.7 version.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;If you encounter any difficulties during installation, &lt;a href="www.google.com"&gt;google&lt;/a&gt; and &lt;a href="https://stackoverflow.com/"&gt;stackoverflow&lt;/a&gt; are your best friend:)&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;&lt;a name="step2"&gt;&lt;/a&gt;Step 2: setup python environment with Anaconda on Win 10&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Open &lt;strong&gt;Anaconda Prompt&lt;/strong&gt; to create new environment. Note that it is the Anaconda Prompt not the windows command line. &lt;br&gt;
&lt;img height="500" src="https://github.com/zmcddn/Blog_Images/raw/master/tutorials/20180211/20180211_1.png"/&gt;&lt;/li&gt;
&lt;li&gt;When the Anaconda Prompt opens, it is in the default directory with many packages pre-installed. Now you can install the missing packages that you need using &lt;code&gt;conda install &amp;lt;package_name&amp;gt;&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;For instance, you can install multiple packages at the same time using &lt;code&gt;conda install Django flask tornado twisted&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;If there are some packages that cannot be installed using &lt;code&gt;conda&lt;/code&gt; command, you can use &lt;code&gt;pip&lt;/code&gt; as described in the following steps.&lt;/li&gt;
&lt;li&gt;Once the packages are installed, you can create your own brand-new python 3.6 environment using &lt;code&gt;conda create -n py36 â€“clone base&lt;/code&gt; as the following picture indicates.&lt;ul&gt;
&lt;li&gt;Since it is a clone from the base, all the packages you installed can be used here. This will save a lot of time.   &lt;br&gt;
&lt;img width="500" src="https://github.com/zmcddn/Blog_Images/raw/master/tutorials/20180211/20180211_2.png"/&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;NOTE&lt;/strong&gt; that you can also create the environment using &lt;code&gt;conda create -n &amp;lt;environment_name&amp;gt;&lt;/code&gt; first and then install all the necessary packages&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Use &lt;code&gt;activate py36&lt;/code&gt; to get into the environment you just created, and use pip to install the packages that cannot be installed with "conda". &lt;ul&gt;
&lt;li&gt;For example, wxpython can be install using pip command as follows (i.e. &lt;code&gt;pip install -U wxpython&lt;/code&gt;):
&lt;img width="500" src="https://github.com/zmcddn/Blog_Images/raw/master/tutorials/20180211/20180211_3.png"/&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;You can use &lt;code&gt;python&lt;/code&gt; command to check the version of python and &lt;code&gt;quit()&lt;/code&gt; command to quit the python environment as follows:  &lt;br&gt;
&lt;img width="600" src="https://github.com/zmcddn/Blog_Images/raw/master/tutorials/20180211/20180211_4.png"/&gt;&lt;/li&gt;
&lt;li&gt;Use &lt;code&gt;deactivate&lt;/code&gt; to quit current environment&lt;/li&gt;
&lt;li&gt;Now the python 3.6 environment is fully prepared, we can add the python 2.7 environment using &lt;code&gt;conda create -n py27 python=2.7&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Once the 2.7 environment is created, again you can use &lt;code&gt;activate py27&lt;/code&gt; to get into the environment and use &lt;code&gt;conda install &amp;lt;package_name&amp;gt;&lt;/code&gt; or &lt;code&gt;pip&lt;/code&gt; to install packages as instructed above.&lt;/li&gt;
&lt;li&gt;When inside your base/root directory, you can use &lt;code&gt;conda info --envs&lt;/code&gt; to check the current environments installed on your computer as follows:&lt;br&gt;
&lt;img alt="Alt text" src="https://github.com/zmcddn/Blog_Images/raw/master/tutorials/20180211/20180211_5.png"&gt;  &lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;&lt;a name="step3"&gt;&lt;/a&gt;Step 3: setup Sublime Text build file on Win 10&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Navigate to the &lt;strong&gt;New Build System&lt;/strong&gt;   &lt;br&gt;
&lt;img width="500" src="https://github.com/zmcddn/Blog_Images/raw/master/tutorials/20180211/20180211_6.png"/&gt;&lt;/li&gt;
&lt;li&gt;Type the following JSON format code as follows. The path on the 4th line is the path to the python environment we created above.  &lt;br&gt;
&lt;img alt="Alt text" src="https://github.com/zmcddn/Blog_Images/raw/master/tutorials/20180211/20180211_7.png"&gt;
&lt;!-- &lt;img width="600" src="https://github.com/zmcddn/Blog_Images/raw/master/tutorials/20180211/20180211_7.png"/&gt; --&gt;&lt;/li&gt;
&lt;li&gt;Save the file with an extension &lt;code&gt;.sublime-build&lt;/code&gt; into the default folder &lt;/li&gt;
&lt;li&gt;Repeat steps 1 to 3 to setup for the other python environment.&lt;/li&gt;
&lt;li&gt;Now you can see the files you just saved have appeared in the "Build System". &lt;ul&gt;
&lt;li&gt;For example, I named as &lt;code&gt;py27&lt;/code&gt; and &lt;code&gt;py36&lt;/code&gt; and they have appeared as shown in step 1&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Now you can check the versions of python by run different build using the following codes.&lt;br&gt;
Run with Py36:&lt;br&gt;
&lt;img width="500" src="https://github.com/zmcddn/Blog_Images/raw/master/tutorials/20180211/20180211_8.png"/&gt;&lt;br&gt;
Run with Py27:&lt;br&gt;
&lt;img width="500" src="https://github.com/zmcddn/Blog_Images/raw/master/tutorials/20180211/20180211_9.png"/&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; the anaconda path for Win 10 is usually &lt;code&gt;D:/Anaconda3/envs/&amp;lt;environemnt_name&amp;gt;/python&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;&lt;a name="step4"&gt;&lt;/a&gt;Step 4: setup python environment with Anaconda on Mac&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Setting up python with Anaconda on Mac is pretty much the same as on Win 10, except that when you activate the environment, you have to use command "source activate" rather than "activate".  &lt;br&gt;
&lt;img alt="Alt text" src="https://github.com/zmcddn/Blog_Images/raw/master/tutorials/20180211/20180211_11.png"&gt;&lt;/li&gt;
&lt;li&gt;For package installation, it is identical to the steps for Win 10 described above. You can simply follow the steps in &lt;a href="#step2"&gt;Step 2&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;&lt;a name="step5"&gt;&lt;/a&gt;Step 5: setup Sublime Text build file on Mac&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Navigate to the "New Build System"  &lt;br&gt;
&lt;img alt="Alt text" src="https://github.com/zmcddn/Blog_Images/raw/master/tutorials/20180211/20180211_10.png"&gt;&lt;/li&gt;
&lt;li&gt;Find the Anaconda path of python environment. The following steps explains how to do it:&lt;ol&gt;
&lt;li&gt;Open a terminal, and activate the environment you would like to set up.&lt;ul&gt;
&lt;li&gt;For example, &lt;code&gt;source activate py27&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Use command &lt;code&gt;which python&lt;/code&gt; to find out the path&lt;/li&gt;
&lt;li&gt;Don't close the terminal and remember the path. The above two steps canbe seen as follows:  &lt;br&gt;
&lt;img alt="Alt text" src="https://github.com/zmcddn/Blog_Images/raw/master/tutorials/20180211/20180211_12.png"&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;Use the path find above and type the following code as follows:  &lt;br&gt;
&lt;img width="500" src="https://github.com/zmcddn/Blog_Images/raw/master/tutorials/20180211/20180211_13.PNG"/&gt;&lt;/li&gt;
&lt;li&gt;Save it to the default location with the &lt;code&gt;.sublime-build&lt;/code&gt; extension. &lt;/li&gt;
&lt;li&gt;You can repeat steps 1 to 4 for other environment you have created.&lt;/li&gt;
&lt;li&gt;To double check, run the following command and see the results:  &lt;br&gt;
&lt;img alt="Alt text" src="https://github.com/zmcddn/Blog_Images/raw/master/tutorials/20180211/20180211_14.png"&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; the anaconda path for Mac is usually &lt;code&gt;/Users/&amp;lt;user_name&amp;gt;/anaconda3/envs/&amp;lt;environemnt_name&amp;gt;/bin/python&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;&lt;a name="summary"&gt;&lt;/a&gt;Summary of useful conda commands&lt;/h2&gt;
&lt;hr&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Commands&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;conda list&lt;/td&gt;
&lt;td&gt;list all the packages installed&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;conda info --envs&lt;/td&gt;
&lt;td&gt;list all the environment created&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;conda create -n *environment_name&lt;/td&gt;
&lt;td&gt;create an environment&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;conda create --name *name1 --clone *name2&lt;/td&gt;
&lt;td&gt;create a new environment (name1) to be a clone of another (name2) one&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;conda install *package1 *package2&lt;/td&gt;
&lt;td&gt;install multipe packages at the same time&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;conda install *package = version&lt;/td&gt;
&lt;td&gt;install a package with a particular version&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;For more environment management commands, you can find them &lt;a href="https://conda.io/docs/user-guide/tasks/manage-environments.html"&gt;&lt;strong&gt;HERE&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="Python"></category><category term="Anaconda"></category><category term="Sublime Text"></category><category term="Environment Setup"></category></entry></feed>