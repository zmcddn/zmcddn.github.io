<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Carson's Tech Hut - Python Environment</title><link href="/" rel="alternate"></link><link href="/feeds/python-environment.atom.xml" rel="self"></link><id>/</id><updated>2018-10-10T00:00:00-06:00</updated><entry><title>Pipenv Tutorial - the official package control for pyton</title><link href="/pipenv-tutorial-the-official-package-control-for-pyton.html" rel="alternate"></link><published>2018-10-10T00:00:00-06:00</published><updated>2018-10-10T00:00:00-06:00</updated><author><name>Carson Zhang</name></author><id>tag:None,2018-10-10:/pipenv-tutorial-the-official-package-control-for-pyton.html</id><summary type="html">&lt;h2&gt;Why use Pipenv:&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Pipenv is essentially a combination of pip and virtualenv (i.e. makes virtual environment), but with better version control&lt;/li&gt;
&lt;li&gt;It solves the version conflict for packages and sub-dependencies&lt;/li&gt;
&lt;li&gt;It could automatically install the latest package/dependency that meet all the requirements&lt;/li&gt;
&lt;li&gt;It is the new &lt;strong&gt;STANDARD&lt;/strong&gt; for …&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;h2&gt;Why use Pipenv:&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Pipenv is essentially a combination of pip and virtualenv (i.e. makes virtual environment), but with better version control&lt;/li&gt;
&lt;li&gt;It solves the version conflict for packages and sub-dependencies&lt;/li&gt;
&lt;li&gt;It could automatically install the latest package/dependency that meet all the requirements&lt;/li&gt;
&lt;li&gt;It is the new &lt;strong&gt;STANDARD&lt;/strong&gt; for python packages and is &lt;strong&gt;OFFICIALLY&lt;/strong&gt; used&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;How to use it&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Installation: &lt;code&gt;pip install pipenv&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;After it is installed, use &lt;code&gt;pipenv&lt;/code&gt; instead of &lt;code&gt;pip&lt;/code&gt; in the future for any package install&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Create/Enter virtual enviornment: &lt;code&gt;pipenv shell&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;This will create a virtual environment if one doesn’t already exist in a default location.&lt;/li&gt;
&lt;li&gt;Here is &lt;a href="https://pipenv.readthedocs.io/en/latest/advanced/#configuration-with-environment-variables"&gt;a list of environment variable&lt;/a&gt; to setup in order to change the default behavior&lt;/li&gt;
&lt;li&gt;You can force the creation of a Python 2 or 3 environment with the arguments &lt;code&gt;--two&lt;/code&gt; and &lt;code&gt;--three&lt;/code&gt; respectively.&lt;ul&gt;
&lt;li&gt;More specific version can be specified as &lt;code&gt;-python 3.6&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Quit virtual environment: &lt;code&gt;ctrl + D&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Install package: same as using &lt;code&gt;pip&lt;/code&gt;, but use &lt;code&gt;pipenv&lt;/code&gt; instead&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;After the installation, two files are generated: &lt;code&gt;Pipfile&lt;/code&gt; and &lt;code&gt;Pipfile.lock&lt;/code&gt;, which are used for package version control&lt;/li&gt;
&lt;li&gt;If the package cannot be installed due to package confliction, use the &lt;code&gt;--skip-lock&lt;/code&gt; argument to skip the package version lock.&lt;ul&gt;
&lt;li&gt;For example, &lt;code&gt;pipenv install django --skip-lock&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Install from version control system (i.e. github): &lt;code&gt;pipenv install -e git+https://github.com/requests/requests.git#egg=requests&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Install package for different environment (i.e. dev environment): &lt;code&gt;pipenv install pytest --dev&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Providing the &lt;code&gt;--dev&lt;/code&gt; argument will put the dependency in a special &lt;code&gt;[dev-packages]&lt;/code&gt; location in the &lt;code&gt;Pipfile&lt;/code&gt;. These development packages only get installed if you specify the &lt;code&gt;--dev&lt;/code&gt; argument with &lt;code&gt;pipenv install&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;The different sections separate dependencies needed only for development from ones needed for the base code to actually work.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Lock the environment for production: &lt;code&gt;pipenv lock&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;This will create/update your Pipfile.lock, which you’ll &lt;strong&gt;never&lt;/strong&gt; need to (and are never meant to) edit manually. You should always use the generated file.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Install the environment in production: &lt;code&gt;pipenv install --ignore-pipfile&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;This tells Pipenv to ignore the &lt;code&gt;Pipfile&lt;/code&gt; for installation and use what’s in the &lt;code&gt;Pipfile.lock&lt;/code&gt;. &lt;/li&gt;
&lt;li&gt;The lock file enables deterministic builds by taking a snapshot of all the versions of packages in an environment (similar to the result of a &lt;code&gt;pip freeze&lt;/code&gt;).&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Setup the development environment: &lt;code&gt;pipenv install --dev&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;This installs all the dependencies needed for development, which includes both the regular dependencies and those you specified with the &lt;code&gt;--dev&lt;/code&gt; argument during install.&lt;/li&gt;
&lt;li&gt;When an exact version isn’t specified in the Pipfile, the install command gives the opportunity for dependencies (and sub-dependencies) to update their versions.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Pipenv’s Dependency Resolution Approach&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Pipenv will attempt to install sub-dependencies that satisfy all the requirements from your core dependencies.&lt;/li&gt;
&lt;li&gt;If there are conflicting dependencies, pipenv will not be able to create a lock file and wil output an error&lt;/li&gt;
&lt;li&gt;Show dependency graph for top-level dependencies and their sub-dependencies: &lt;code&gt;pipenv graph&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Show dependency graph for the sub-dependencies with the parent: &lt;code&gt;pipenv graph --reverse&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;The Pipfile&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Pipfile&lt;/code&gt; intends to replace &lt;code&gt;requirements.txt&lt;/code&gt;. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://packaging.python.org/tutorials/managing-dependencies/#managing-dependencies"&gt;Pipenv is the official package management tool recommended by Python itself.&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You shouldn’t have any sub-dependencies in your Pipfile.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;You should only include the packages you actually import and use. Pipenv will install the dependencies automatically.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;The Pipfile.lock&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;This file enables deterministic builds by specifying the exact requirements for reproducing an environment.&lt;/li&gt;
&lt;li&gt;It contains exact versions for packages and hashes to support more secure verification.&lt;/li&gt;
&lt;li&gt;Its in &lt;code&gt;JSON&lt;/code&gt; format&lt;/li&gt;
&lt;li&gt;You should &lt;strong&gt;never&lt;/strong&gt; change this file by hand.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Pipenv Extra Features&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Open a third-party package in your default editor: &lt;code&gt;pipenv open flask&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;This will open the &lt;code&gt;flask&lt;/code&gt; package in the default editor&lt;/li&gt;
&lt;li&gt;You can specify a program with an &lt;code&gt;EDITOR&lt;/code&gt; environmental variable.&lt;ul&gt;
&lt;li&gt;i.e. &lt;code&gt;EDITOR=subl&lt;/code&gt; for sublime text&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Run a command in the virtual environment without launching a shell: &lt;code&gt;pipenv run &amp;lt;insert command here&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Check for security vulnerabilities: &lt;code&gt;pipenv check&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Uninstall a package: &lt;code&gt;pipenv uninstall numpy&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Wipe all the installed packages from virtual environment: &lt;code&gt;pipenv uninstall --all&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;You can replace &lt;code&gt;--all&lt;/code&gt; with &lt;code&gt;--all-dev&lt;/code&gt; to just remove dev packages.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Pipenv supports the automatic loading of environmental variables when a &lt;code&gt;.env&lt;/code&gt; file exists in the top-level directory. &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;When you pipenv shell to open the virtual environment, it loads your environmental variables from the file. &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;To find out where your virtual environment is: &lt;code&gt;pipenv --venv&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;To find out where your project home is: &lt;code&gt;pipenv --where&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Generate requirements.txt file from Pipfile:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;pipenv lock -r &amp;gt; requirements.txt&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pipenv lock -r -d &amp;gt; dev-requirements.txt&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;What if you alerady have a requirements.txt file&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;pipenv install&lt;/code&gt; should automatically detect the &lt;code&gt;requirements.txt&lt;/code&gt; and convert it to a &lt;code&gt;Pipfile&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;You should change Pipfile to only specify exact versions if &lt;code&gt;requirements.txt&lt;/code&gt; file uses exact versions&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If things break because of a dependency:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Update code to function with the new version of the dependency.&lt;ul&gt;
&lt;li&gt;If backward compatibility with previous versions of the dependency isn’t possible, you have to bump the required version in Pipfile like &lt;code&gt;numpy = "&amp;gt;=1.15"&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Restrict the version of the dependency in the Pipfile to be &amp;lt; the version that just broke your code: &lt;code&gt;numpy = "&amp;gt;=1.14.1,&amp;lt;1.15"&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You could just install from the requirement file as usual: &lt;code&gt;pipenv install -r requirements.txt&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;If you have a dev version or something similar, you can add the &lt;code&gt;--dev&lt;/code&gt; argument as follows: &lt;code&gt;pipenv install -r dev-requirements.txt --dev&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Work flow for any project&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Get pipenv: &lt;code&gt;pip install pipenv&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Create a virtual environment: &lt;code&gt;pipenv shell&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Setup local development: &lt;code&gt;pipenv install --dev&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Work on the code, use version control such as &lt;code&gt;git&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;After done development, lock the environment: &lt;code&gt;pipenv lock&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;When finished working, quit environment: &lt;code&gt;ctrl + D&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Setup production: &lt;code&gt;pipenv install --ignore-pipfile&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Repeate steps 3-6 for development&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Reference&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://realpython.com/pipenv-guide/"&gt;Pipenv: A Guide to the New Python Packaging Tool&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pipenv.readthedocs.io/en/latest/basics/"&gt;Basic Usage of Pipenv&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://feici02.github.io/2017/09/24/pipenv-cheatsheet.html"&gt;Pipenv Cheatsheet | feici02’s tidbits&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="Python"></category><category term="Pipenv"></category><category term="Virtualenv"></category><category term="setup"></category></entry><entry><title>Setup Virtualenv for Any Project</title><link href="/setup-virtualenv-for-any-project.html" rel="alternate"></link><published>2018-07-04T00:00:00-06:00</published><updated>2018-07-04T00:00:00-06:00</updated><author><name>Carson Zhang</name></author><id>tag:None,2018-07-04:/setup-virtualenv-for-any-project.html</id><summary type="html">&lt;ul&gt;
&lt;li&gt;Virtualenv is a very handy tool for creating seperate virtual environments for python projects.&lt;/li&gt;
&lt;li&gt;It is essential and probably mandatory in many cases to use Virtualenv or Virtualenv-like tools (i.e. Anaconda, Pipenv) to run a python project.&lt;/li&gt;
&lt;li&gt;In this tutorial, I'll show you how to create a virtualenv for …&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;ul&gt;
&lt;li&gt;Virtualenv is a very handy tool for creating seperate virtual environments for python projects.&lt;/li&gt;
&lt;li&gt;It is essential and probably mandatory in many cases to use Virtualenv or Virtualenv-like tools (i.e. Anaconda, Pipenv) to run a python project.&lt;/li&gt;
&lt;li&gt;In this tutorial, I'll show you how to create a virtualenv for a python project step-by-step. &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; the commends in this tutorial is for Linux/Mac OS, Windows will be slightly differnet when setting up environment variables and system path&lt;/p&gt;
&lt;h2&gt;Setup virtualenv&lt;/h2&gt;
&lt;h4&gt;1. Install pip&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;sudo apt-get install python-pip&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;2. Install virtualenv&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;sudo pip install virtualenv&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;3. Create a folder to install virtualenv&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Normally this folder would be created inside the project folder&lt;ul&gt;
&lt;li&gt;For example, inside the &lt;strong&gt;Projects&lt;/strong&gt; folder&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;It should be named as &lt;strong&gt;Envs&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;4. Install virtualenvwrapper&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;sudo pip install virtualenvwrapper&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;This is a very useful tool/package to save you from the hassles of virtualenv&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;5. Set WORKON_HOME to your virtualenv&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;export WORKON_HOME=~/Desktop/Projects/Env&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;If the virtualenv folder is located at the root directary, use:&lt;ul&gt;
&lt;li&gt;&lt;code&gt;export WORKON_HOME=~/.Env&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;6. Add &lt;code&gt;virtualenvwrapper.sh&lt;/code&gt; to &lt;code&gt;.bashrc&lt;/code&gt; (&lt;strong&gt;NOTE&lt;/strong&gt; its &lt;code&gt;.zshrc&lt;/code&gt; on Mac)&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Nevigate to the folder where the virtualenv is installed (normally under /usr/local/bin)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;nano ~/.bashrc&lt;/code&gt; (&lt;code&gt;nano ~/.zshrc&lt;/code&gt; on Mac)&lt;/li&gt;
&lt;li&gt;Add the following line to the folder:&lt;ul&gt;
&lt;li&gt;&lt;code&gt;. /usr/local/bin/virtualenvwrapper.sh&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;If the virtualenvwrapper is installed in another directory, add the path of the directory instead of the &lt;code&gt;/usr/local/bin/&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;For example, &lt;code&gt;. /Users/Carson/anaconda3/bin/virtualenvwrapper.sh&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;CTRL + X&lt;/code&gt; to exit, and &lt;code&gt;Y&lt;/code&gt; to save, and hit &lt;code&gt;Enter&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;After its being added, use &lt;code&gt;source ~/.bashrc&lt;/code&gt; (&lt;code&gt;source ~/.zshrc&lt;/code&gt; on Mac) to check if it is working. It should print some files on the screen with no errors&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2&gt;Setup virtual environment&lt;/h2&gt;
&lt;h4&gt;1. make virtual environment&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;mkvirtualenv env_name --python=python3&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;check python version: &lt;code&gt;python -V&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;2. activate environment&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;the environment is activated by default when created&lt;/li&gt;
&lt;li&gt;to activate an environment: &lt;code&gt;workon env_name&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;3. get the project&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;nevigate to the directory that you would like to download the project&lt;/li&gt;
&lt;li&gt;get the project: &lt;code&gt;git clone&lt;/code&gt; &lt;/li&gt;
&lt;li&gt;From the directory you could tell which python version the project is under&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;4. get all the nesscary packages&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;enter the project directory and nevigate to where the requirement file is located&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pip install -r requirements.txt&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;5. adding apps for the defaul path in virtualenv&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;sometimes when installing the packages errors may occor, since the apps are put inside the &lt;strong&gt;apps folder&lt;/strong&gt; which is not recognized by virtualenv&lt;/li&gt;
&lt;li&gt;add the &lt;strong&gt;apps folder&lt;/strong&gt;: &lt;code&gt;add2virtualenv apps&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;6. setup default startup folder for the environment&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;nevigate to the folder where you work all the time&lt;/li&gt;
&lt;li&gt;setup the folder as default: &lt;code&gt;setvirtualenvproject&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;once the defaul folder is setup, use &lt;code&gt;cdproject&lt;/code&gt; to go back from anywhere&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;7. install dev tools:&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;If the project has a different requirements file for the devs, nevigate tothat folder&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pip install -r /requirements/dev.txt&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;8. remove environment&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;rmvirtualenv env_name&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;9. tell django which setting files to run in environment:&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;the goal of this step is for the django to use the customized settings in the &lt;code&gt;/project_name/settings/dev.py&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;go to the folder where the &lt;code&gt;manage.py&lt;/code&gt; locates&lt;/li&gt;
&lt;li&gt;copy the path generated: &lt;code&gt;pwd&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;go to the virtual environment: &lt;code&gt;cdvirtualenv&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cd bin&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;to enter and edit the file: &lt;code&gt;nano postactivate&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;put the following lines below the comments:&lt;ul&gt;
&lt;li&gt;&lt;code&gt;export DJANGO_SETTINGS_MODULE='project_name.settings.dev'&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;export PYTHONPATH=$PYTHONPATH:'path_generated_by_pwd'&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;The first line allows you to use customized settings&lt;/li&gt;
&lt;li&gt;The second line allows you to &lt;code&gt;django-admin&lt;/code&gt; commands&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;close and save the file: &lt;code&gt;ctrl + x&lt;/code&gt;, type &lt;code&gt;y&lt;/code&gt; and press &lt;code&gt;enter&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;to enter and edit the file: &lt;code&gt;nano postdeactivate&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;put the following lines below the comments:&lt;ul&gt;
&lt;li&gt;&lt;code&gt;unset DJANGO_SETTINGS_MODULE&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;deactivate and activate&lt;/strong&gt; the environment for the settings to work&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;10. start django project&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;if you have done step 9: &lt;code&gt;django-admin runserver&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;if you haven't done step 9: &lt;code&gt;python manage.py runserver&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;11. check the website in browser&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;localhost:8000&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;12. Force refresh the browser&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Sometimes when working with multiple projects and switching back and forth, the page display in browser can be scattered since there is cache built-in the browser&lt;/li&gt;
&lt;li&gt;to force refresh the browser: &lt;code&gt;ctrl + shift + r&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;13. Some useful virtualenv commands&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;lsvirtualenv&lt;/code&gt;&lt;/strong&gt;: List all of the environments.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;cdsitepackages&lt;/code&gt;&lt;/strong&gt;: Navigate into the &lt;code&gt;site-package&lt;/code&gt; directory of the currently activated virtual environment&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;lssitepackages&lt;/code&gt;&lt;/strong&gt;: Shows contents of &lt;code&gt;site-package&lt;/code&gt; directory.&lt;/li&gt;
&lt;/ul&gt;</content><category term="Python"></category><category term="Ubuntu"></category><category term="Linux"></category><category term="Virtualenv"></category><category term="setup"></category></entry><entry><title>The ultimate guide to setup multiple Python environment with Anaconda and Sublime Text</title><link href="/the-ultimate-guide-to-setup-multiple-python-environment-with-anaconda-and-sublime-text.html" rel="alternate"></link><published>2018-02-11T00:00:00-07:00</published><updated>2018-02-11T00:00:00-07:00</updated><author><name>Carson Zhang</name></author><id>tag:None,2018-02-11:/the-ultimate-guide-to-setup-multiple-python-environment-with-anaconda-and-sublime-text.html</id><summary type="html">&lt;p&gt;The need for setting up a virtual executing environment of Python has a lot of advantages and has been widely discussed over internet. Here I have a tutorial for setting up multiple environment with Anaconda and Sublime Text.  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The reason I choose Anaconda over Virtualenv is because Anaconda is widely …&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt;The need for setting up a virtual executing environment of Python has a lot of advantages and has been widely discussed over internet. Here I have a tutorial for setting up multiple environment with Anaconda and Sublime Text.  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The reason I choose Anaconda over Virtualenv is because Anaconda is widely used in the industry, especially in the big data and machine learning field, and it covers most functions of Virtualenv.   &lt;/li&gt;
&lt;li&gt;I choose Sublime Text as my IDE because it is very simple yet powful with many plugins. It is way faster and more efficient than many other IDES.  &lt;/li&gt;
&lt;li&gt;The installation of Anaconda will not be covered here as there are many tutorials online already.  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The tutorial has the following steps:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#step-1-install-anaconda-3"&gt;&lt;a name="step1"&gt;&lt;/a&gt;Step 1: install Anaconda 3&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#step-2-setup-python-environment-with-anaconda-on-win-10"&gt;&lt;a name="step2"&gt;&lt;/a&gt;Step 2: setup python environment with Anaconda on Win 10&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#step-3-setup-sublime-text-build-file-on-win-10"&gt;&lt;a name="step3"&gt;&lt;/a&gt;Step 3: setup Sublime Text build file on Win 10&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#step-4-setup-python-environment-with-anaconda-on-mac"&gt;&lt;a name="step4"&gt;&lt;/a&gt;Step 4: setup python environment with Anaconda on Mac&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#step-5-setup-sublime-text-build-file-on-mac"&gt;&lt;a name="step5"&gt;&lt;/a&gt;Step 5: setup Sublime Text build file on Mac&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#summary-of-useful-conda-commands"&gt;&lt;a name="summary"&gt;&lt;/a&gt;Summary of useful conda commands&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a name="step1"&gt;&lt;/a&gt;Step 1: install Anaconda 3&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Install &lt;a href="https://www.anaconda.com/download/"&gt;&lt;strong&gt;Anaconda 3&lt;/strong&gt;&lt;/a&gt;. Choose the version that you use most frequently. &lt;ul&gt;
&lt;li&gt;For example, if you are working with python 3.6 most of the time, you should download the 3.6 version; otherwise, you can download the 2.7 version.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;If you encounter any difficulties during installation, &lt;a href="www.google.com"&gt;google&lt;/a&gt; and &lt;a href="https://stackoverflow.com/"&gt;stackoverflow&lt;/a&gt; are your best friend:)&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;&lt;a name="step2"&gt;&lt;/a&gt;Step 2: setup python environment with Anaconda on Win 10&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Open &lt;strong&gt;Anaconda Prompt&lt;/strong&gt; to create new environment. Note that it is the Anaconda Prompt not the windows command line. &lt;br&gt;
&lt;img height="500" src="https://github.com/zmcddn/Blog_Images/raw/master/tutorials/20180211/20180211_1.png"/&gt;&lt;/li&gt;
&lt;li&gt;When the Anaconda Prompt opens, it is in the default directory with many packages pre-installed. Now you can install the missing packages that you need using &lt;code&gt;conda install &amp;lt;package_name&amp;gt;&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;For instance, you can install multiple packages at the same time using &lt;code&gt;conda install Django flask tornado twisted&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;If there are some packages that cannot be installed using &lt;code&gt;conda&lt;/code&gt; command, you can use &lt;code&gt;pip&lt;/code&gt; as described in the following steps.&lt;/li&gt;
&lt;li&gt;Once the packages are installed, you can create your own brand-new python 3.6 environment using &lt;code&gt;conda create -n py36 –clone base&lt;/code&gt; as the following picture indicates.&lt;ul&gt;
&lt;li&gt;Since it is a clone from the base, all the packages you installed can be used here. This will save a lot of time.   &lt;br&gt;
&lt;img width="500" src="https://github.com/zmcddn/Blog_Images/raw/master/tutorials/20180211/20180211_2.png"/&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;NOTE&lt;/strong&gt; that you can also create the environment using &lt;code&gt;conda create -n &amp;lt;environment_name&amp;gt;&lt;/code&gt; first and then install all the necessary packages&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Use &lt;code&gt;activate py36&lt;/code&gt; to get into the environment you just created, and use pip to install the packages that cannot be installed with "conda". &lt;ul&gt;
&lt;li&gt;For example, wxpython can be install using pip command as follows (i.e. &lt;code&gt;pip install -U wxpython&lt;/code&gt;):
&lt;img width="500" src="https://github.com/zmcddn/Blog_Images/raw/master/tutorials/20180211/20180211_3.png"/&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;You can use &lt;code&gt;python&lt;/code&gt; command to check the version of python and &lt;code&gt;quit()&lt;/code&gt; command to quit the python environment as follows:  &lt;br&gt;
&lt;img width="600" src="https://github.com/zmcddn/Blog_Images/raw/master/tutorials/20180211/20180211_4.png"/&gt;&lt;/li&gt;
&lt;li&gt;Use &lt;code&gt;deactivate&lt;/code&gt; to quit current environment&lt;/li&gt;
&lt;li&gt;Now the python 3.6 environment is fully prepared, we can add the python 2.7 environment using &lt;code&gt;conda create -n py27 python=2.7&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Once the 2.7 environment is created, again you can use &lt;code&gt;activate py27&lt;/code&gt; to get into the environment and use &lt;code&gt;conda install &amp;lt;package_name&amp;gt;&lt;/code&gt; or &lt;code&gt;pip&lt;/code&gt; to install packages as instructed above.&lt;/li&gt;
&lt;li&gt;When inside your base/root directory, you can use &lt;code&gt;conda info --envs&lt;/code&gt; to check the current environments installed on your computer as follows:&lt;br&gt;
&lt;img alt="Alt text" src="https://github.com/zmcddn/Blog_Images/raw/master/tutorials/20180211/20180211_5.png"&gt;  &lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;&lt;a name="step3"&gt;&lt;/a&gt;Step 3: setup Sublime Text build file on Win 10&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Navigate to the &lt;strong&gt;New Build System&lt;/strong&gt;   &lt;br&gt;
&lt;img width="500" src="https://github.com/zmcddn/Blog_Images/raw/master/tutorials/20180211/20180211_6.png"/&gt;&lt;/li&gt;
&lt;li&gt;Type the following JSON format code as follows. The path on the 4th line is the path to the python environment we created above.  &lt;br&gt;
&lt;img alt="Alt text" src="https://github.com/zmcddn/Blog_Images/raw/master/tutorials/20180211/20180211_7.png"&gt;
&lt;!-- &lt;img width="600" src="https://github.com/zmcddn/Blog_Images/raw/master/tutorials/20180211/20180211_7.png"/&gt; --&gt;&lt;/li&gt;
&lt;li&gt;Save the file with an extension &lt;code&gt;.sublime-build&lt;/code&gt; into the default folder &lt;/li&gt;
&lt;li&gt;Repeat steps 1 to 3 to setup for the other python environment.&lt;/li&gt;
&lt;li&gt;Now you can see the files you just saved have appeared in the "Build System". &lt;ul&gt;
&lt;li&gt;For example, I named as &lt;code&gt;py27&lt;/code&gt; and &lt;code&gt;py36&lt;/code&gt; and they have appeared as shown in step 1&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Now you can check the versions of python by run different build using the following codes.&lt;br&gt;
Run with Py36:&lt;br&gt;
&lt;img width="500" src="https://github.com/zmcddn/Blog_Images/raw/master/tutorials/20180211/20180211_8.png"/&gt;&lt;br&gt;
Run with Py27:&lt;br&gt;
&lt;img width="500" src="https://github.com/zmcddn/Blog_Images/raw/master/tutorials/20180211/20180211_9.png"/&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; the anaconda path for Win 10 is usually &lt;code&gt;D:/Anaconda3/envs/&amp;lt;environemnt_name&amp;gt;/python&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;&lt;a name="step4"&gt;&lt;/a&gt;Step 4: setup python environment with Anaconda on Mac&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Setting up python with Anaconda on Mac is pretty much the same as on Win 10, except that when you activate the environment, you have to use command "source activate" rather than "activate".  &lt;br&gt;
&lt;img alt="Alt text" src="https://github.com/zmcddn/Blog_Images/raw/master/tutorials/20180211/20180211_11.png"&gt;&lt;/li&gt;
&lt;li&gt;For package installation, it is identical to the steps for Win 10 described above. You can simply follow the steps in &lt;a href="#step2"&gt;Step 2&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;&lt;a name="step5"&gt;&lt;/a&gt;Step 5: setup Sublime Text build file on Mac&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Navigate to the "New Build System"  &lt;br&gt;
&lt;img alt="Alt text" src="https://github.com/zmcddn/Blog_Images/raw/master/tutorials/20180211/20180211_10.png"&gt;&lt;/li&gt;
&lt;li&gt;Find the Anaconda path of python environment. The following steps explains how to do it:&lt;ol&gt;
&lt;li&gt;Open a terminal, and activate the environment you would like to set up.&lt;ul&gt;
&lt;li&gt;For example, &lt;code&gt;source activate py27&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Use command &lt;code&gt;which python&lt;/code&gt; to find out the path&lt;/li&gt;
&lt;li&gt;Don't close the terminal and remember the path. The above two steps canbe seen as follows:  &lt;br&gt;
&lt;img alt="Alt text" src="https://github.com/zmcddn/Blog_Images/raw/master/tutorials/20180211/20180211_12.png"&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;Use the path find above and type the following code as follows:  &lt;br&gt;
&lt;img width="500" src="https://github.com/zmcddn/Blog_Images/raw/master/tutorials/20180211/20180211_13.PNG"/&gt;&lt;/li&gt;
&lt;li&gt;Save it to the default location with the &lt;code&gt;.sublime-build&lt;/code&gt; extension. &lt;/li&gt;
&lt;li&gt;You can repeat steps 1 to 4 for other environment you have created.&lt;/li&gt;
&lt;li&gt;To double check, run the following command and see the results:  &lt;br&gt;
&lt;img alt="Alt text" src="https://github.com/zmcddn/Blog_Images/raw/master/tutorials/20180211/20180211_14.png"&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; the anaconda path for Mac is usually &lt;code&gt;/Users/&amp;lt;user_name&amp;gt;/anaconda3/envs/&amp;lt;environemnt_name&amp;gt;/bin/python&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;&lt;a name="summary"&gt;&lt;/a&gt;Summary of useful conda commands&lt;/h2&gt;
&lt;hr&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Commands&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;conda list&lt;/td&gt;
&lt;td&gt;list all the packages installed&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;conda info --envs&lt;/td&gt;
&lt;td&gt;list all the environment created&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;conda create -n *environment_name&lt;/td&gt;
&lt;td&gt;create an environment&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;conda create --name *name1 --clone *name2&lt;/td&gt;
&lt;td&gt;create a new environment (name1) to be a clone of another (name2) one&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;conda install *package1 *package2&lt;/td&gt;
&lt;td&gt;install multipe packages at the same time&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;conda install *package = version&lt;/td&gt;
&lt;td&gt;install a package with a particular version&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;For more environment management commands, you can find them &lt;a href="https://conda.io/docs/user-guide/tasks/manage-environments.html"&gt;&lt;strong&gt;HERE&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="Python"></category><category term="Anaconda"></category><category term="Sublime Text"></category><category term="Environment Setup"></category></entry></feed>